name: Validate API Specification

on:
  push:
    branches: [ main, feat/orchestrator-v1-api ]
    paths:
      - 'api-specs/**'
      - 'apps/adk-orchestrator/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api-specs/**'
      - 'apps/adk-orchestrator/**'

jobs:
  validate-api:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pydantic pydantic-settings PyYAML openapi-spec-validator httpx aiosqlite
    - name: Validate OpenAPI spec
      run: |
        python -c "
        import yaml
        from openapi_spec_validator import validate_spec
        
        # Load and validate the API spec
        with open('api-specs/orchestrator-v1.yaml', 'r') as f:
            spec = yaml.safe_load(f)
        
        try:
            validate_spec(spec)
            print('‚úÖ OpenAPI specification is valid')
        except Exception as e:
            print(f'‚ùå OpenAPI specification validation failed: {e}')
            exit(1)
        "
    
    - name: Test API endpoints
      run: |
        cd apps/adk-orchestrator
        python -c "
        import sys
        sys.path.append('../../packages')
        
        from main import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        
        # Test health endpoints
        health_response = client.get('/healthz')
        assert health_response.status_code == 200
        assert health_response.json() == {'ok': True}
        print('‚úÖ /healthz endpoint working')
        
        ready_response = client.get('/readyz')
        assert ready_response.status_code == 200
        assert ready_response.json() == {'ready': True}
        print('‚úÖ /readyz endpoint working')
        
        # Test config endpoint
        config_response = client.get('/v1/config')
        assert config_response.status_code == 200
        config_data = config_response.json()
        assert 'services' in config_data
        assert 'agents' in config_data
        assert 'log' in config_data
        print('‚úÖ /v1/config endpoint working')
        
        # Test plan endpoint with valid data
        plan_data = {
            'pr': {
                'repo': 'test/repo',
                'pr_number': 123,
                'branch': 'feature/test',
                'head_sha': 'abc123'
            },
            'mode': 'plan',
            'labels': ['test'],
            'extra': {}
        }
        
        plan_response = client.post('/v1/runs/plan', json=plan_data)
        assert plan_response.status_code == 200
        plan_result = plan_response.json()
        assert 'run_id' in plan_result
        assert 'status' in plan_result
        assert 'started_at' in plan_result
        print('‚úÖ /v1/runs/plan endpoint working')
        
        print('üéâ All API endpoints validated successfully!')
        "