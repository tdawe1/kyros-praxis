name: backend-tests

on:
  push:
    branches: [main]
    paths:
      - "kyros-praxis/services/orchestrator/**"
      - ".github/workflows/backend-tests.yml"
      - "kyros-praxis/pytest.ini"
  pull_request:
    paths:
      - "kyros-praxis/services/orchestrator/**"
      - ".github/workflows/backend-tests.yml"
      - "kyros-praxis/pytest.ini"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install orchestrator deps
        run: |
          python -m pip install --upgrade pip
          pip install -r kyros-praxis/services/orchestrator/requirements.txt
          pip install ruff==0.6.9
      # Lint intentionally skipped in this focused acceptance job
      - name: Run steel-thread smoke (orchestrator)
        env:
          API_KEYS: ci-key
          DATABASE_URL: sqlite+aiosqlite:///./orchestrator_async.db
        run: |
          cd kyros-praxis
          python - << 'PY'
          from fastapi.testclient import TestClient
          from services.orchestrator.main import app
          from services.orchestrator.database import SessionLocal
          from services.orchestrator.models import User
          from services.orchestrator.auth import pwd_context

          s = SessionLocal()
          if not s.query(User).filter(User.email=='ci@example.com').first():
              s.add(User(email='ci@example.com', password_hash=pwd_context.hash('password')))
              s.commit()
          s.close()

          c = TestClient(app)
          r = c.get('/healthz'); assert r.status_code == 200 and r.json().get('status')=='ok'
          login = c.post('/auth/login', json={'email':'ci@example.com','password':'password'})
          assert login.status_code == 200, login.text
          token = login.json()['access_token']
          create = c.post('/collab/tasks', json={'title':'t','description':'d'}, headers={'Authorization': f'Bearer {token}'})
          assert create.status_code == 200, create.text
          assert 'ETag' in create.headers
          list_resp = c.get('/collab/state/tasks')
          assert list_resp.status_code == 200, list_resp.text
          assert list_resp.json().get('kind')=='tasks'
          assert 'ETag' in list_resp.headers

          # Jobs Day-1 smoke: create + get by id + list
          hdrs = {'Authorization': f'Bearer {token}', 'X-API-Key': 'ci-key'}
          j_create = c.post('/jobs', json={'title':'ci job'}, headers=hdrs)
          assert j_create.status_code == 200, j_create.text
          assert 'ETag' in j_create.headers
         job_id = j_create.json()['id']
          j_get = c.get(f'/jobs/{job_id}', headers=hdrs)
          assert j_get.status_code == 200 and j_get.json()['id'] == job_id, j_get.text
          assert 'ETag' in j_get.headers
          j_list = c.get('/jobs', headers=hdrs)
          assert j_list.status_code == 200 and 'jobs' in j_list.json(), j_list.text
          assert 'ETag' in j_list.headers
          print('STEEL_THREAD_SMOKE_OK')
          PY
