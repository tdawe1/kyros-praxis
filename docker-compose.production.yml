version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kyros-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kyros}
      POSTGRES_USER: ${POSTGRES_USER:-kyros_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kyros_user}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kyros-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kyros-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kyros-network

  # Backend API (FastAPI)
  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
      args:
        - APP_ENV=production
    image: kyros-orchestrator:latest
    container_name: kyros-orchestrator
    restart: unless-stopped
    environment:
      APP_ENV: production
      DEBUG: "false"
      DATABASE_URL: postgresql://${POSTGRES_USER:-kyros_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kyros}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      CSRF_SECRET: ${CSRF_SECRET}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-https://localhost:3000}
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900}
    volumes:
      - ./services/orchestrator/alembic:/app/alembic:ro
      - orchestrator_logs:/app/logs
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kyros-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend (Next.js)
  console:
    build:
      context: ./services/console
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: kyros-console:latest
    container_name: kyros-console
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://orchestrator:8000/api/v1}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-https://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    volumes:
      - console_logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      orchestrator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kyros-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kyros-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - console
      - orchestrator
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kyros-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kyros-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - kyros-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: kyros-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3001:3000"
    depends_on:
      - prometheus
    networks:
      - kyros-network

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: kyros-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - kyros-network

  # Log Collector - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: kyros-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - orchestrator_logs:/var/log/orchestrator:ro
      - console_logs:/var/log/console:ro
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - kyros-network

networks:
  kyros-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  orchestrator_logs:
    driver: local
  console_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local