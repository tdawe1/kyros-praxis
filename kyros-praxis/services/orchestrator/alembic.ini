# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time.
# prefix = %%(year)d_%%(month).2d_%%(day).2d_

# path to migration environment
migration_environment = env.py

# max number of revisions to run at once
revision_environment = true

# flag to allow .py migrations to be run
# run_python_path = /path/to/python

# flag to allow .py migrations to be run
# sqlalchemy.url = driver://user:pass@localhost/dbname

# sqlalchemy.url may also be a "token" configuration, which is a one-line string of the form
# scheme://host:port/dbname?querystring. The "token" configuration is parsed into a sqlalchemy.engine.URL
# object and used to construct the connection. This allows you to specify things like high availability
# clusters in a simple way.
# SQLAlchemy URL will be overridden by env.py using DATABASE_URL environment variable
# sqlalchemy.url = postgresql+asyncpg://user:pass@localhost/dbname

# The output encoding used when revision files are written from script.py.mako
# output_encoding = utf-8

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run on newly generated
# revision scripts.  See the documentation for further detail and examples

# format using "black" - use the chance to clean up the newly generated file
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix
# hooks = feedback
# feedback.type = python_function
# feedback.entrypoint = myproject.scripts.feedback.run
# feedback.options = --verbose --single-file REVISION_SCRIPT_FILENAME