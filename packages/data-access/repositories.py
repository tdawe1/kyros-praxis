from abc import ABC, abstractmethod
from typing import Protocol


class UnitOfWork(Protocol):
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc, tb): ...
    async def commit(self): ...
    async def rollback(self): ...


class TaskRepository(ABC):
    @abstractmethod
    async def get(self, task_id: str): ...
    @abstractmethod
    async def save(self, task: dict): ...
    @abstractmethod
    async def list(self, **filters): ...


class LockRepository(ABC): ...


class AgentRepository(ABC): ...
